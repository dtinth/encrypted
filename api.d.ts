/**
 * A convenient module to let you store keys directly inside source code in encrypted form.
 *
 * @remarks This package comes with a CLI to let you easily encrypt things from the command line.
 * For more information, please check out the project documentation at {@link https://docs.dt.in.th/encrypted/}.
 *
 * Note: This module trades security for convenience. Please exercise caution when using this module.
 *
 * @example Using the this package to store keys directly inside source code in encrypted form:
 * ```
 * const encrypted = require('@dtinth/encrypted')()
 * const accessKeyId = encrypted`H7WwoocLJnbDgKk1+5vH47JvLp49FQZn.0KlZf2igr
 * h8hzoKG9zGv1t9rmrUZ4PYftuOy3lV96ygthjpFBlQ=`
 * const secretAccessKey = encrypted`pg2ozvrK9nun1TGuycfCAV50qgjdgc3Y.WSweW
 * kty/OSqppfOcbTEGn0jmdoHy+6fCkV0cnij9S7UVC0rihIygjFZ5S8TBYd8+Rl8LEKLDDuSF
 * A==`
 * ```
 * The encryption keys will be loaded from the environment variable `ENCRYPTION_SECRET`.
 * @packageDocumentation
 */

/**
 * Creates a {@link CipherDecipher} instance.
 * @param psk - A pre-shared key. If not specified, the key will be loaded from the environment variable `ENCRYPTION_SECRET`. If that is not set, an error will be thrown.
 * You can generate a random key from {@link https://tweetnacl.js.org/#/secretbox | TweetNaCl.jsâ€™s website} or run `openssl rand -base64 32`.
 * @returns An object that can be used to encrypt and decrypt data
 * @remarks This module is a CommonJS module. Use it from CommonJS code like this:
 * ```
 * const encrypted = require('@dtinth/encrypted')()
 * ```
 *
 * To use it in a ES modules, import it like this:
 * ```
 * import Encrypted from '@dtinth/encrypted'
 * const encrypted = Encrypted()
 * ```
 *
 * @example Create a {@link CipherDecipher} instance using the key specified in the environment variable `ENCRYPTION_SECRET`
 * ```
 * const encrypted = require('@dtinth/encrypted')()
 * ```
 *
 * Note: If the environment variable is not set, an error will be thrown.
 *
 * @example Create a {@link CipherDecipher} instance using a specified pre-shared key
 * ```
 * const encrypted = require('@dtinth/encrypted')('XY0GiHz+mzZsNWP78v4fVdsoIFkfadNNh+kKuKRJUSI=')
 * ```
 *
 * @public
 */
export function Encrypted(psk?: string): CipherDecipher

/**
 * An object generated by the {@link Encrypted} function that can be used to encrypt and decrypt any JSON-serializable data.
 * This object has already been configured with a key when it was created.
 *
 * @remarks
 * This object is callable. If called directly, it will call the {@link CipherDecipher.decrypt} function.
 * @example Using the this package to store keys directly inside source code in encrypted form:
 * ```
 * const encrypted = require('@dtinth/encrypted')()
 * const accessKeyId = encrypted`H7WwoocLJnbDgKk1+5vH47JvLp49FQZn.0KlZf2igr
 * h8hzoKG9zGv1t9rmrUZ4PYftuOy3lV96ygthjpFBlQ=`
 * const secretAccessKey = encrypted`pg2ozvrK9nun1TGuycfCAV50qgjdgc3Y.WSweW
 * kty/OSqppfOcbTEGn0jmdoHy+6fCkV0cnij9S7UVC0rihIygjFZ5S8TBYd8+Rl8LEKLDDuSF
 * A==`
 * ```
 *
 * @public
 */
export interface CipherDecipher {
  /**
   * Decrypts the data.
   * @param payload - The encrypted payload
   * @returns The decrypted data, which can be any JSON-serializable data
   */
  (payload: string): any

  /**
   * Decrypts the data.
   * @param payload - The encrypted payload
   * @returns The decrypted data, which can be any JSON-serializable data
   */
  (payload: [string]): any

  /**
   * Decrypts the data.
   * @param payload - The encrypted payload
   * @returns The decrypted data, which can be any JSON-serializable data
   * @example
   * ```
   * encrypted.decrypt("H7WwoocLJnbDgKk1+5vH47JvLp49FQZn.0KlZf2igrh8hzoKG9zGv1t9rmrUZ4PYftuOy3lV96ygthjpFBlQ=")
   * // => "AKIAYVP4CIPPB7TRITNC"
   * ```
   * You can also call the `encrypted` object directly:
   * ```
   * encrypted("H7WwoocLJnbDgKk1+5vH47JvLp49FQZn.0KlZf2igrh8hzoKG9zGv1t9rmrUZ4PYftuOy3lV96ygthjpFBlQ=")
   * // => "AKIAYVP4CIPPB7TRITNC"
   * ```
   */
  decrypt(payload: string): any

  /**
   * Encrypts the data.
   * @param data - The data to encrypt, which can be any JSON-serializable data
   * @returns The encrypted payload, a string
   * @example
   * ```
   * encrypted.encrypt("AKIAYVP4CIPPB7TRITNC")
   * // => "H7WwoocLJnbDgKk1+5vH47JvLp49FQZn.0KlZf2igrh8hzoKG9zGv1t9rmrUZ4PYftuOy3lV96ygthjpFBlQ="
   * ```
   */
  encrypt(data: any): string
}
